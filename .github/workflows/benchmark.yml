name: Benchmark

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run benchmarks weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build release binary for benchmarking
      run: cargo build --release -p uncp-cli

    - name: Run basic performance test
      run: |
        mkdir -p test_data
        for i in {1..50}; do
          echo "Test file content $i" > test_data/file_$i.txt
        done
        time ./target/release/uncp-cli scan test_data



  memory-benchmark:
    name: Memory Usage Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev valgrind

    - name: Build release binary
      run: cargo build --release -p uncp-cli

    - name: Create test data
      run: |
        mkdir -p test_data
        for i in {1..100}; do
          echo "Test file content $i" > test_data/file_$i.txt
          cp test_data/file_1.txt test_data/duplicate_$i.txt
        done

    - name: Run memory profiling
      run: |
        valgrind --tool=massif --massif-out-file=massif.out \
          ./target/release/uncp-cli scan test_data --hash
        
    - name: Generate memory report
      run: |
        ms_print massif.out > memory_report.txt
        echo "Peak memory usage:"
        grep "peak" memory_report.txt || echo "No peak found"

    - name: Upload memory report
      uses: actions/upload-artifact@v4
      with:
        name: memory-report
        path: |
          memory_report.txt
          massif.out
